#version 430 core

/////////////////// 
// RANDOMNESS 
////////////////////

// Implementation found on StackOverflow: 
// https://stackoverflow.com/questions/4200224/random-noise-functions-for-glsl#4275343

// A single iteration of Bob Jenkins' One-At-A-Time hashing algorithm.
uint hash( uint x ) {
    x += ( x << 10u );
    x ^= ( x >>  6u );
    x += ( x <<  3u );
    x ^= ( x >> 11u );
    x += ( x << 15u );
    return x;
}

// Compound versions of the hashing algorithm I whipped together.
uint hash( uvec2 v ) { return hash( v.x ^ hash(v.y)                         ); }
uint hash( uvec3 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z)             ); }
uint hash( uvec4 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z) ^ hash(v.w) ); }



// Construct a float with half-open range [0:1] using low 23 bits.
// All zeroes yields 0.0, all ones yields the next smallest representable value below 1.0.
float floatConstruct( uint m ) {
    const uint ieeeMantissa = 0x007FFFFFu; // binary32 mantissa bitmask
    const uint ieeeOne      = 0x3F800000u; // 1.0 in IEEE binary32

    m &= ieeeMantissa;                     // Keep only mantissa bits (fractional part)
    m |= ieeeOne;                          // Add fractional part to 1.0

    float  f = uintBitsToFloat( m );       // Range [1:2]
    return f - 1.0;                        // Range [0:1]
}

// Pseudo-random value in half-open range [0:1].
float random( float x ) { return floatConstruct(hash(floatBitsToUint(x))); }
float random( vec2  v ) { return floatConstruct(hash(floatBitsToUint(v))); }
float random( vec3  v ) { return floatConstruct(hash(floatBitsToUint(v))); }
float random( vec4  v ) { return floatConstruct(hash(floatBitsToUint(v))); }

/////////////////// 
// DATA 
////////////////////

uniform int u_width;
uniform int u_height;
uniform float u_time;

uniform bool u_cos_color;
uniform vec3 u_cc;
uniform vec3 u_dd;
uniform vec2 u_angle_vector;
uniform bool u_angle_own_position;

uniform float u_probability_to_die;

// To create perfect loops we will first increase the number of particles linearly
// and then decrease them linearly. By overlaying the increase and the decrease
// we fill get a something that loops perfectly. 
uniform bool u_loop;
uniform int u_loop_iteration;
uniform int u_fps;
uniform float u_speed;

uniform int u_interpolation_mode;

struct Particle{
	// x and y are positions
	// z is number of steps until the particle is alive
	// w is how long it has to live
	vec4 pos_loop;
	vec4 color;
};

layout(std430, binding = 1) buffer particleBuffer
{
	Particle particles[];
};

layout(std430, binding = 2) buffer vectorFieldBuffer
{
	vec2 vectorField[];
};

/////////////////// 
// Helper Functions
////////////////////

// Assumes they are laid out in columns...
int calcVectorPosition(int x, int y){
	return x * u_height + y ;
}

vec3 cos_color(in float f, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {
    return a + b * cos(f * c + d);
}

/////////////////// 
// Main
////////////////////


layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

void main()
{
	float speed_factor = u_speed * 30.0 / u_fps;

	uint i = gl_GlobalInvocationID.x;

	Particle particle = particles[i];
	vec2 pos = particle.pos_loop.xy;
	float alive_from = particle.pos_loop.z;
	float dead_after = particle.pos_loop.w + alive_from;
	float iteration = float(u_loop_iteration);

	if(!u_loop || (alive_from < iteration && iteration <= dead_after)){

		// Find the 4 closest vectors
		// We have to subtract with 1.0 becaause we need to have vectors all around us.
		float f_width = float(u_width) - 1.0;
		float f_height = float(u_height) - 1.0;
		float x = (pos.x + 1.0) / 2.0 * f_width;
		float y = (pos.y + 1.0) / 2.0  * f_height;
		vec2 realPos = vec2(x, y);

		bool inside_vector_field = (x >= 0.0 && x < f_width && y >= 0.0 && y < f_height);
		bool random_death = random(vec3(u_time, pos)) <= u_probability_to_die;

		if ( !inside_vector_field || random_death){
			// Randomly reset the particle somewhere viewable
			vec2 random_pos = vec2(random(pos.x), random(pos.y)) * 2.0 - 1.0;
			particles[i].pos_loop = vec4(random_pos, particle.pos_loop.zw);

			pos = particles[i].pos_loop.xy;
			x = (pos.x + 1.0) / 2.0 * f_width;
			y = (pos.y + 1.0) / 2.0  * f_height;
			realPos = vec2(x, y);
		}

		
		int x_index = int(floor(x));
		int y_index = int(floor(y));
		// The inverse of the distance. Lucklily every sqaure is exactly one unit.
		vec2 xy_dist = realPos - floor(realPos);
		vec2 velocity;

		// Smooth interpolation
		if(u_interpolation_mode == 0){
			// Interpolate the x-axis
			vec2 r1 = vectorField[calcVectorPosition(x_index, y_index)] * (1.0 - xy_dist.x) + vectorField[calcVectorPosition(x_index + 1, y_index)] * xy_dist.x;
			vec2 r2 = vectorField[calcVectorPosition(x_index, y_index + 1)] * (1.0 - xy_dist.x) + vectorField[calcVectorPosition(x_index + 1, y_index + 1)] * xy_dist.x;
			// Interpolate the y-axis
			velocity = r1 * (1.0 - xy_dist.y) + r2 * xy_dist.y;

		} else {
			// Take closest vector
			if (xy_dist.x <= 0.5 && xy_dist.y <= 0.5 ){
				velocity =	vectorField[calcVectorPosition(x_index, y_index)];
			} else if (xy_dist.x <= 0.5 && xy_dist.y >= 0.5 ) {
				velocity =	vectorField[calcVectorPosition(x_index, y_index + 1)];
			} else if (xy_dist.x >= 0.5 && xy_dist.y >= 0.5 ) {
				velocity =	vectorField[calcVectorPosition(x_index + 1, y_index)];
			} else  {
				velocity =	vectorField[calcVectorPosition(x_index + 1, y_index + 1)];
			}

		}
			particles[i].pos_loop += vec4(speed_factor * velocity, 0.0, 0.0);

		if(u_cos_color){
			// Ensures the output is between 0-1
			vec3 aa = vec3(0.5);
			vec3 bb = vec3(0.5);
			float angle = acos(dot(normalize(velocity), normalize(u_angle_vector)));
			if(u_angle_own_position){
				float angle = acos(dot(normalize(velocity), normalize(pos + u_angle_vector)));
			}

			particles[i].color = vec4(cos_color(angle, aa, bb, u_cc, u_dd), 1.0);
		}
	} else {
		// We park the particles outside clipspace so that we can't see them
		vec2 random_pos = vec2(random(pos.x), random(pos.y)) * 2.0 + 8.0;
		particles[i].pos_loop = vec4(random_pos, particle.pos_loop.zw);

	}

}